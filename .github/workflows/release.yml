name: Release

on:
  push:
    paths:
      - ".github/workflows/release.yml"
  workflow_dispatch:

env:
  VERSION: 0.2.${{ github.run_number }}

jobs:

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-11-arm
            target: aarch64-pc-windows-msvc
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-13
            target: x86_64-apple-darwin

    steps:
    - uses: actions/checkout@v4    
    - name: Update Version
      shell: pwsh
      run: |
        $version = (Get-Content -Path Cargo.toml -Raw) -replace 'version = "0.1.0"', 'version = "${{ env.VERSION }}"'
        $version | Set-Content -Path Cargo.toml
    - name: Install Rust
      uses: christianhelle/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    - name: Rust cache
      uses: christianhelle/rust-cache@v2
    - name: Build
      run: cargo build --release
    - name: Zip artifacts
      shell: pwsh
      run: |
        mv target/release/ado* ./
        Compress-Archive ado*, README.md, LICENSE ${{ matrix.target }}.zip
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}        
        path: ${{ matrix.target }}.zip

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4    
    - name: Create tag
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.token }}
        script: |
          github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: "refs/tags/${{ env.VERSION }}",
            sha: context.sha
          })
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts    
    - name: Create release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: v${{ env.VERSION }}
        draft: true
        prerelease: false
    - name: Upload Windows x64 asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: artifacts/x86_64-pc-windows-msvc/x86_64-pc-windows-msvc.zip
        asset_name: windows-x64.zip
        asset_content_type: application/zip
    - name: Upload Windows ARM64 asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: artifacts/aarch64-pc-windows-msvc/aarch64-pc-windows-msvc.zip
        asset_name: windows-arm64.zip
        asset_content_type: application/zip
    - name: Upload MacOS ARM64 asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: artifacts/aarch64-apple-darwin/aarch64-apple-darwin.zip
        asset_name: macos-arm64.zip
        asset_content_type: application/zip
    - name: Upload MacOS x64 asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: artifacts/x86_64-apple-darwin/x86_64-apple-darwin.zip
        asset_name: macos-x64.zip
        asset_content_type: application/zip
    - name: Upload Linux x64 asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: artifacts/x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu.zip
        asset_name: linux-x64.zip
        asset_content_type: application/zip
    - name: Upload Linux ARM64 asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: artifacts/aarch64-unknown-linux-gnu/aarch64-unknown-linux-gnu.zip
        asset_name: linux-arm64.zip
        asset_content_type: application/zip

  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Update Version
      shell: pwsh
      run: |
        $version = (Get-Content -Path Cargo.toml -Raw) -replace 'version = "0.1.0"', 'version = "${{ env.VERSION }}"'
        $version | Set-Content -Path Cargo.toml
    - name: Install Rust
      uses: christianhelle/rust-toolchain@stable
    - name: Rust cache
      uses: christianhelle/rust-cache@v2
    - name: Publish to crates.io
      run: cargo publish --allow-dirty --token ${{ secrets.CRATES_TOKEN }}

  publish-snapcraft:
    name: Publish to Snapcraft
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Download Linux x64 artifact
      uses: actions/download-artifact@v4
      with:
        name: x86_64-unknown-linux-gnu
        path: artifacts
    - name: Extract binary
      run: |
        cd artifacts
        unzip x86_64-unknown-linux-gnu.zip
        chmod +x ado
    - name: Build and publish snap
      uses: snapcore/action-build@v1
      with:
        snapcraft-token: ${{ secrets.SNAPCRAFT_TOKEN }}