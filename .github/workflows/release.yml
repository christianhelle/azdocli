name: Release

on:
  push:
    paths:
      - ".github/workflows/release.yml"
    branches:
      - main
  workflow_dispatch:

env:
  VERSION: 0.2.${{ github.run_number }}

jobs:

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-11-arm
            target: aarch64-pc-windows-msvc
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-13
            target: x86_64-apple-darwin

    steps:
    - uses: actions/checkout@v4    
    - name: Update Version
      shell: pwsh
      run: |
        $version = (Get-Content -Path Cargo.toml -Raw) -replace 'version = "0.1.0"', 'version = "${{ env.VERSION }}"'
        $version | Set-Content -Path Cargo.toml
    - name: Install Rust
      uses: christianhelle/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    - name: Rust cache
      uses: christianhelle/rust-cache@v2
    - name: Build
      run: cargo build --release
    - name: Zip artifacts
      shell: pwsh
      run: |
        mv target/release/ado* ./
        Compress-Archive ado*, README.md, LICENSE ${{ matrix.target }}.zip
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}
        path: ${{ matrix.target }}.zip

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Create tag
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.token }}
        script: |
          github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: "refs/tags/${{ env.VERSION }}",
            sha: context.sha
          })
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    - name: Create release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: v${{ env.VERSION }}
        draft: true
        prerelease: false
    - name: Upload Windows x64 asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: artifacts/x86_64-pc-windows-msvc/x86_64-pc-windows-msvc.zip
        asset_name: windows-x64.zip
        asset_content_type: application/zip
    - name: Upload Windows ARM64 asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: artifacts/aarch64-pc-windows-msvc/aarch64-pc-windows-msvc.zip
        asset_name: windows-arm64.zip
        asset_content_type: application/zip
    - name: Upload MacOS ARM64 asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: artifacts/aarch64-apple-darwin/aarch64-apple-darwin.zip
        asset_name: macos-arm64.zip
        asset_content_type: application/zip
    - name: Upload MacOS x64 asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: artifacts/x86_64-apple-darwin/x86_64-apple-darwin.zip
        asset_name: macos-x64.zip
        asset_content_type: application/zip
    - name: Upload Linux x64 asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: artifacts/x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu.zip
        asset_name: linux-x64.zip
        asset_content_type: application/zip
    - name: Upload Linux ARM64 asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: artifacts/aarch64-unknown-linux-gnu/aarch64-unknown-linux-gnu.zip
        asset_name: linux-arm64.zip
        asset_content_type: application/zip

  publish-crates:
    name: Distrubute to crates.io
    runs-on: ubuntu-latest
    needs: release
    steps:
    - uses: actions/checkout@v4
    - name: Update Version
      shell: pwsh
      run: |
        $version = (Get-Content -Path Cargo.toml -Raw) -replace 'version = "0.1.0"', 'version = "${{ env.VERSION }}"'
        $version | Set-Content -Path Cargo.toml
    - name: Install Rust
      uses: christianhelle/rust-toolchain@stable
    - name: Rust cache
      uses: christianhelle/rust-cache@v2
    - name: Publish to crates.io
      run: cargo publish --allow-dirty --token ${{ secrets.CRATES_TOKEN }}

  homebrew-distribute:
    name: Distribute to Homebrew
    runs-on: ubuntu-latest
    needs: release
    steps:
    - uses: actions/checkout@v4
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    - name: Calculate SHA256 checksums
      id: checksums
      run: |
        echo "macos_x64_sha=$(sha256sum artifacts/x86_64-apple-darwin/x86_64-apple-darwin.zip | cut -d' ' -f1)" >> $GITHUB_OUTPUT
        echo "macos_arm64_sha=$(sha256sum artifacts/aarch64-apple-darwin/aarch64-apple-darwin.zip | cut -d' ' -f1)" >> $GITHUB_OUTPUT
    - name: Generate Homebrew formula
      run: |
        ./scripts/generate-homebrew.sh "${{ env.VERSION }}" "${{ steps.checksums.outputs.macos_x64_sha }}" "${{ steps.checksums.outputs.macos_arm64_sha }}"
    - name: Upload Homebrew artifacts
      uses: actions/upload-artifact@v4
      with:
        name: homebrew-package
        path: homebrew/azdocli-${{ env.VERSION }}.rb
    - name: Create Homebrew PR
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.HOMEBREW_GITHUB_TOKEN }}
      run: |
        # Note: This would require setting up a separate repository for Homebrew tap
        # For now, we just generate the formula
        echo "Homebrew formula generated. Manual submission to homebrew-core or create a tap required."
        echo "Formula location: homebrew/azdocli-${{ env.VERSION }}.rb"

  chocolatey-distribute:
    name: Distribute to Chocolatey
    runs-on: windows-latest
    needs: release
    steps:
    - uses: actions/checkout@v4
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    - name: Calculate SHA256 checksums
      id: checksums
      run: |
        echo "windows_x64_sha=$(sha256sum artifacts/x86_64-pc-windows-msvc/x86_64-pc-windows-msvc.zip | cut -d' ' -f1)" >> $GITHUB_OUTPUT
    - name: Generate Chocolatey package
      run: |
        ./scripts/generate-chocolatey.sh "${{ env.VERSION }}" "${{ steps.checksums.outputs.windows_x64_sha }}"
    - name: Upload Chocolatey artifacts
      uses: actions/upload-artifact@v4
      with:
        name: chocolatey-package
        path: chocolatey-package-${{ env.VERSION }}/
    - name: Publish to Chocolatey
      env:
        CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
      run: |
        choco push chocolatey-package-${{ env.VERSION }}/azdocli.${{ env.VERSION }}.nupkg --source https://push.chocolatey.org/

  winget-distribute:
    name: Distribute to WinGet
    runs-on: windows-latest
    needs: release
    steps:
    - uses: actions/checkout@v4
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    - name: Calculate SHA256 checksums
      id: checksums
      run: |
        echo "windows_x64_sha=$(sha256sum artifacts/x86_64-pc-windows-msvc/x86_64-pc-windows-msvc.zip | cut -d' ' -f1)" >> $GITHUB_OUTPUT
        echo "windows_arm64_sha=$(sha256sum artifacts/aarch64-pc-windows-msvc/aarch64-pc-windows-msvc.zip | cut -d' ' -f1)" >> $GITHUB_OUTPUT
    - name: Generate WinGet manifests
      run: |
        ./scripts/generate-winget.sh "${{ env.VERSION }}" "${{ steps.checksums.outputs.windows_x64_sha }}" "${{ steps.checksums.outputs.windows_arm64_sha }}"
    - name: Upload WinGet artifacts
      uses: actions/upload-artifact@v4
      with:
        name: winget-package
        path: winget-${{ env.VERSION }}/
    - name: Submit to WinGet
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.WINGET_GITHUB_TOKEN }}
      run: |
        # Note: This would require setting up winget-cli or creating a PR to winget-pkgs
        # For now, we just generate the manifests
        echo "WinGet manifests generated. Manual submission to microsoft/winget-pkgs required."
        echo "Manifests location: winget-${{ env.VERSION }}/"

  snapcraft-distribute:
    name: Distribute to Snapcraft
    runs-on: ubuntu-latest
    needs: release
    steps:
    - uses: actions/checkout@v4
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    - name: Calculate SHA256 checksums
      id: checksums
      run: |
        echo "linux_x64_sha=$(sha256sum artifacts/x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu.zip | cut -d' ' -f1)" >> $GITHUB_OUTPUT
        echo "linux_arm64_sha=$(sha256sum artifacts/aarch64-unknown-linux-gnu/aarch64-unknown-linux-gnu.zip | cut -d' ' -f1)" >> $GITHUB_OUTPUT
    - name: Generate Snapcraft package
      run: |
        ./scripts/generate-snapcraft.sh "${{ env.VERSION }}"
    - name: Upload Snapcraft artifacts
      uses: actions/upload-artifact@v4
      with:
        name: snapcraft-package
        path: snap-package-${{ env.VERSION }}/
    - name: Publish to Snapcraft
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_TOKEN }}
      run: |
        # Note: This would require setting up snapcraft and the binary in the snap package
        # For now, we just generate the configuration files
        echo "Snapcraft package configuration generated. Manual publication required."
        echo "To publish: snapcraft upload snap-package-${{ env.VERSION }}/azdocli_${{ env.VERSION }}_amd64.snap"
